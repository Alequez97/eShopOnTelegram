name: Deploy infrastructure and application

on:
  push:
    branches:
      - master
      - azure-key-vault-migration
  workflow_dispatch:
    inputs:
      environment:
        required: true
        default: 'dev'

env:
  ARM_CLIENT_ID: ${{ secrets.GH_SP_AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.GH_SP_AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ADMIN_APP_LOCATION: src/eShopOnTelegram.Admin
  TELEGRAM_WEBAPP_LOCATION: src/eShopOnTelegram.TelegramWebApp

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    
    name: Deploy Azure infrastructure
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init -backend-config=resource_group_name=rg-infrastructure-administration -backend-config="storage_account_name=stcommonterraformstate" -backend-config="container_name=eshopontelegram-terraform-state" -backend-config="key=terraform-state-dev.tfstate" -reconfigure

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -input=false -out=plan -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="app_sp_object_id=${{ secrets.APP_SP_AZURE_OBJECT_ID }}" -var="app_sp_client_id=${{ secrets.APP_SP_AZURE_CLIENT_ID }}" -var="app_sp_client_secret=${{ secrets.APP_SP_AZURE_CLIENT_SECRET }}" -var="admin_object_id=${{ secrets.ADMIN_AZURE_OBJECT_ID }}" -var="sp_object_id=${{ secrets.GH_SP_AZURE_OBJECT_ID }}" -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}" -var="telegram_bot_owner_telegram_id=${{ secrets.TELEGRAM_BOT_OWNER_TELEGRAM_ID }}" -var="telegram_token=${{ secrets.TELEGRAM_TOKEN }}" -var="payment_card_api_token=${{ secrets.PAYMENT_CARD_API_TOKEN }}" -var="payment_plicio_api_token=${{ secrets.PAYMENT_PLICIO_API_TOKEN }}" -var-file="vars/dev.tfvars"

      - name: Teffaform Apply
        id: terraformapply
        working-directory: terraform
        run: terraform apply "plan"

      - name: Set terraform output to GitHub env variables
        working-directory: terraform
        id: terraformoutput
        run: |
          echo "resourceGroupName=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "resourceGroupLocation=$(terraform output -raw resource_group_location)" >> $GITHUB_OUTPUT
          echo "adminAppName=$(terraform output -raw admin_app_name)" >> $GITHUB_OUTPUT
          echo "adminAppHostName=$(terraform output -raw admin_app_host_name)" >> $GITHUB_OUTPUT
          echo "telegramWebAppName=$(terraform output -raw telegram_webapp_name)" >> $GITHUB_OUTPUT
          echo "acrLoginServer=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "acrUsername=$(terraform output -raw acr_username)" >> $GITHUB_OUTPUT
          echo "acrPassword=$(terraform output -raw acr_password)" >> $GITHUB_OUTPUT
          echo "keyVaultUri=$(terraform output -raw key_vault_uri)" >> $GITHUB_OUTPUT
      
    outputs:
      resourceGroupName: ${{ steps.terraformoutput.outputs.resourceGroupName }}
      resourceGroupLocation: ${{ steps.terraformoutput.outputs.resourceGroupLocation }}
      adminAppName: ${{ steps.terraformoutput.outputs.adminAppName }}
      adminAppHostName: ${{ steps.terraformoutput.outputs.adminAppHostName }}
      telegramWebAppName: ${{ steps.terraformoutput.outputs.telegramWebAppName }}
      acrLoginServer: ${{ steps.terraformoutput.outputs.acrLoginServer }}
      acrUsername: ${{ steps.terraformoutput.outputs.acrUsername }}
      acrPassword: ${{ steps.terraformoutput.outputs.acrPassword }}
      keyVaultUri: ${{ steps.terraformoutput.outputs.keyVaultUri }}
  
  deploy_admin_app:
    runs-on: ubuntu-latest
    
    name: Deploy admin app to dev env
    needs: [deploy_infrastructure]
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Restore NuGet packages
        working-directory: ${{ env.ADMIN_APP_LOCATION }}
        run: dotnet restore

      - name: Build admin application
        working-directory: ${{ env.ADMIN_APP_LOCATION }}
        run: dotnet build --configuration Release --no-restore
      
      - name: Publish admin application
        working-directory: ${{ env.ADMIN_APP_LOCATION }}
        run: dotnet publish --configuration Release --no-build --output publish

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.GH_SP_AZURE_CREDENTIALS }}

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy_infrastructure.outputs.adminAppName }}
          package: ${{ env.ADMIN_APP_LOCATION }}/publish

  deploy_telegram_webapp:
    runs-on: ubuntu-latest
    
    name: 'Deploy telegram webapp'
    needs: [deploy_infrastructure]
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Restore NuGet packages
        working-directory: ${{ env.TELEGRAM_WEBAPP_LOCATION }}
        run: dotnet restore

      - name: Build telegram webapp
        working-directory: ${{ env.TELEGRAM_WEBAPP_LOCATION }}
        run: dotnet build --configuration Release --no-restore
      
      - name: Publish telegram webapp
        working-directory: ${{ env.TELEGRAM_WEBAPP_LOCATION }}
        run: dotnet publish --configuration Release --no-build --output publish

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.GH_SP_AZURE_CREDENTIALS }}

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy_infrastructure.outputs.telegramWebAppName }}
          package: ${{ env.TELEGRAM_WEBAPP_LOCATION }}/publish

  deploy_telegram_bot:
    runs-on: ubuntu-latest

    name: 'Deploy telegram bot'
    needs: [deploy_infrastructure]
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.GH_SP_AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ needs.deploy_infrastructure.outputs.acrLoginServer }}
          username: ${{ needs.deploy_infrastructure.outputs.acrUsername }}
          password: ${{ needs.deploy_infrastructure.outputs.acrPassword }}
          
      - name: Push telegram bot docker image
        run: |
          docker build -f ./src/eShopOnTelegram.TelegramBot/Dockerfile -t ${{ needs.deploy_infrastructure.outputs.acrLoginServer }}/containerimage-telegrambot-eshopontelegram-dev:latest .
          docker push ${{ needs.deploy_infrastructure.outputs.acrLoginServer }}/containerimage-telegrambot-eshopontelegram-dev:latest

      - name: Deploy telegram bot container instance
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ needs.deploy_infrastructure.outputs.resourceGroupName }}
          location: ${{ needs.deploy_infrastructure.outputs.resourceGroupLocation }}
          name: containerinstance-telegrambot-eshopontelegram-dev
          image: ${{ needs.deploy_infrastructure.outputs.acrLoginServer }}/containerimage-telegrambot-eshopontelegram-dev:latest
          dns-name-label: containerinstance-telegrambot-eshopontelegram-dev
          ports: 80
          cpu: 1
          memory: 1
          registry-login-server: ${{ needs.deploy_infrastructure.outputs.acrLoginServer }}
          registry-username: ${{ needs.deploy_infrastructure.outputs.acrUsername }}
          registry-password: ${{ needs.deploy_infrastructure.outputs.acrPassword }}
          environment-variables: Azure__KeyVaultUri=${{ needs.deploy_infrastructure.outputs.keyVaultUri }} Azure__TenantId=${{ secrets.AZURE_TENANT_ID }} Azure__ClientId=${{ secrets.APP_SP_AZURE_CLIENT_ID }} AdminHost=${{ needs.deploy_infrastructure.outputs.adminAppHostName }}
          secure-environment-variables: Azure__ClientSecret=${{ secrets.APP_SP_AZURE_CLIENT_SECRET }}

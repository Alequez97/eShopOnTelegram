name: Deploy infrastructure and application

on:
  push:
    branches:
      - master
      - azure-key-vault-migration
  workflow_dispatch:
    # inputs:
    #   logLevel:
    #     description: 'Log level'     
    #     required: true
    #     default: 'warning'
    #   tags:
    #     description: 'Test scenario tags'

env:
  ARM_CLIENT_ID: ${{ secrets.GH_SP_AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.GH_SP_AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ADMIN_APP_LOCATION: src/eShopOnTelegram.Admin
  TELEGRAM_WEBAPP_LOCATION: src/eShopOnTelegram.TelegramWebApp

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    
    name: Deploy Azure infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init -backend-config=resource_group_name=rg-infrastructure-administration -backend-config="storage_account_name=stcommonterraformstate" -backend-config="container_name=eshopontelegram-terraform-state" -backend-config="key=terraform-state-dev.tfstate" -reconfigure

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -input=false -out=plan -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="app_sp_object_id=${{ secrets.APP_SP_AZURE_OBJECT_ID }}" -var="app_sp_client_id=${{ secrets.APP_SP_AZURE_CLIENT_ID }}" -var="app_sp_client_secret=${{ secrets.APP_SP_AZURE_CLIENT_SECRET }}" -var="admin_object_id=${{ secrets.ADMIN_AZURE_OBJECT_ID }}" -var="sp_object_id=${{ secrets.GH_SP_AZURE_OBJECT_ID }}" -var-file="vars/dev.tfvars"

      - name: Teffaform Apply
        id: terraformapply
        working-directory: terraform
        run: terraform apply "plan"

      - name: Set terraform output to GitHub env variables
        working-directory: terraform
        id: terraformoutput
        run: |
          echo "adminAppName=$(terraform output -raw admin_app_name)" >> $GITHUB_OUTPUT
          echo "telegramWebAppName=$(terraform output -raw telegram_webapp_name)" >> $GITHUB_OUTPUT
      
    outputs:
      adminAppName: ${{ steps.terraformoutput.outputs.adminAppName }}
      telegramWebAppName: ${{ steps.terraformoutput.outputs.telegramWebAppName }}
  
  deploy_admin_app:
    runs-on: ubuntu-latest
    
    name: Deploy admin app to dev env
    needs: [deploy_infrastructure]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Restore NuGet packages
        working-directory: ${{ env.ADMIN_APP_LOCATION }}
        run: dotnet restore

      - name: Build admin application
        working-directory: ${{ env.ADMIN_APP_LOCATION }}
        run: dotnet build --configuration Release --no-restore
      
      - name: Publish admin application
        working-directory: ${{ env.ADMIN_APP_LOCATION }}
        run: dotnet publish --configuration Release --no-build --output publish

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.GH_SP_AZURE_CREDENTIALS }}

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy_infrastructure.outputs.adminAppName }}
          package: ${{ env.ADMIN_APP_LOCATION }}/publish

  deploy_telegram_webapp:
    runs-on: ubuntu-latest
    
    name: 'Deploy telegram webapp'
    needs: [deploy_infrastructure]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Restore NuGet packages
        working-directory: ${{ env.TELEGRAM_WEBAPP_LOCATION }}
        run: dotnet restore

      - name: Build telegram webapp
        working-directory: ${{ env.TELEGRAM_WEBAPP_LOCATION }}
        run: dotnet build --configuration Release --no-restore
      
      - name: Publish telegram webapp
        working-directory: ${{ env.TELEGRAM_WEBAPP_LOCATION }}
        run: dotnet publish --configuration Release --no-build --output publish

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.GH_SP_AZURE_CREDENTIALS }}

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy_infrastructure.outputs.telegramWebAppName }}
          package: ${{ env.TELEGRAM_WEBAPP_LOCATION }}/publish